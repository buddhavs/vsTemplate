--
1. rmq qos
https://www.rabbitmq.com/consumer-prefetch.html
rmqctl TLS support
rmqctl prints out msg header
rmqctl debugging user issue


--
2.
Actor should have:
    1. start time
    2. end time
    3. host information (host name, ip, k8s service label etc. zap log right away instead of
    pushing error to error actor for logging the message.)
    4. capacity information (number of default goroutines it supports)
    5. Cancel should remove the canceled actor from registry. // atomic
    6, Actor by default is stateless, if stateful, persists it's state which
        can be loaded through Restart.
        (using a PersistActor to persist data.)
    7. smarter design for writing to close channel...
    8. Send/receive should NOT block.



2.1
Message / payload should have Actors[address] in metadata, like route
modifying MAC address for next hop. Including Version information
    (Match to REST API version/gRPC version)

Message / payload should have UUID
Message / payload should have timestamp
Message / payload should have version (message version)
encode/encrypt section for later version.
Message / payload can have a actor path field which records the
    actors that has processed this message. (only record the previous
    actor, since actor has and trace info help debugging the path.)

exp backoff for blocking Actor
https://godoc.org/github.com/cenkalti/backoff
https://github.com/eapache/go-resiliency


--
3.
Snapshot service:
when process ends, snapshot the current status into DB.
(sqlite, yes, sqlite should be used anyway)



--
4. trace enabled


--
5. k8s probe/metrics


--
6. validates structs
config versioning https://github.com/hashicorp/go-version


--
7. unit test only on onTap logic for now.


// ------------------------------------------------------------------
Tada moment:
1. gRPC between daemon, actors amount processes
2. light REST interface
3. dynamic creates next actor process inside k8s, actor dies if idles
4. integrate with tensorflow/ actor for tf.


--- Design Principle ---
1.
Clear separation of concerns

2.
Garbage free in steady state running

3.
Lock-free, wait-free, and copy-free in data structures in the message path

4.
Repsect the Single Writer Principle

5.
Major data structures are not shared

6.
Don't burden the main path with exceptional cases

7.
Non-blocking in the message path
